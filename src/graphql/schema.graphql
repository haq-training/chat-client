# This file was generated. Do not edit manually.

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

type ChatMember {
    is_admin: Boolean!
    user: User!
}

type ChatMessage {
    content: String!
    id: ID!
    messageContentType: MessageContentType
    posted_at: Date!
    posted_by: User!
    """

    Return number of read by another user for message send by own.
    Return null if posted by another user.
    """
    read_count: Int
    room_id: Int!
}

type ChatMessageConnection {
    edges: [ChatMessageEdge]
    pageInfo: PageInfo!
    totalCount: Int!
}

type ChatMessageEdge {
    cursor: String!
    node: ChatMessage
}

type ChatRoom {
    id: Int!
    members: [ChatMember!]!
    messages(input: PaginationInput): ChatMessageConnection!
    name: String
    type: ChatRoomType!
    unread_count: Int
}

type ChatRoomConnection {
    edges: [ChatRoomEdge]
    pageInfo: PageInfo!
    totalCount: Int!
}

type ChatRoomEdge {
    cursor: String!
    node: ChatRoom
}

type FriendRequest {
    message: String
    senderId: Int!
}

type Mutation {
    ChangePassword(input: changePasswordInput!): SuccessResponse!
    acceptFriend(id: ID!): SuccessResponse!
    addFriend(email: String!): SuccessResponse!
    add_chat_member(input: AddChatMemberInput!): ChatRoom!
    block_user(id: ID!): SuccessResponse!
    close_chat_room(input: CloseChatRoomInput!): SuccessResponse!
    create_chat_room(input: CreateChatRoomInput!): ChatRoom!
    """

    #### Error Code:

    - `Unauthenticated`
    - `ChatMessageNotFound`
    - `NotPermitted`
    """
    delete_chat_message(input: DeleteChatMessageInput!): SuccessResponse!
    delete_user(id: ID!): SuccessResponse!
    edit_chat_message(input: EditChatMessageInput!): ChatMessage!
    forgot_password(input: ForgotPassword!): SuccessResponse!
    leave_chat_room(input: LeaveChatRoomInput!): SuccessResponse!
    post_chat_message(input: PostChatMessageInput!): ChatMessage!
    register(input: CreateUserInput!): User!
    """

    #### Error Code:

    - `Unauthenticated`
    - `PlayerNotFound`
    """
    send_direct_message(input: SendDirectMessageInput!): SuccessResponse!
    unFriend(id: ID!): SuccessResponse!
    unblock_user(id: ID!): SuccessResponse!
    upRoleUser(id: ID!): SuccessResponse!
    updateUser(input: UpdateUserInput!): SuccessResponse!
    view_chat_messages(input: ViewChatMessagesInput!): ChatMessageConnection!
}

type PageInfo {
    endCursor: Cursor
    hasNextPage: Boolean!
}

type Query {
    chat_room(roomId: Int!): ChatRoom!
    chat_room_list(input: ChatRoomListInput!): ChatRoomConnection!
    get_chat_room_from_participant(isPrivate: Boolean, participantIds: [Int!]!): ChatRoom
    listFriend: list_all_friend
    login(input: UserLoginInput!): UserLoginResponse!
    me: User!
    user(id: ID!): User!
    users: [User]
}

type Subscription {
    friendRequestReceived(userId: Int!): FriendRequest
    onlineTracker(userId: Int!): UserOnline!
}

type User {
    avatarUrl: String
    createdAt: Date
    email: String!
    firstName: String!
    id: Int!
    lastName: String!
    location: String
    role: Int!
    status: Boolean
    story: String
    updatedAt: Date
}

type UserLoginResponse {
    token: String!
    user: User!
}

type UserOnline {
    body: String
    id: Int
}

type list_Friend {
    avatarUrl: String
    email: String!
    firstName: String!
    id: Int!
    lastName: String!
    location: String
    status: Boolean
    story: String
}

type list_all_friend {
    block: [list_Friend]
    follower: [list_Friend]
    friend: [list_Friend]
}

enum ChatRoomType {
    group
    private
}

enum MessageContentType {
    image
    text
}

enum SuccessResponse {
    success
}

scalar Cursor

scalar Date

scalar JSON

scalar Upload

input AddChatMemberInput {
    members: [ChatMemberInput!]!
    roomId: Int!
}

input ChatMemberInput {
    isAdmin: Boolean = false
    userId: Int!
}

input ChatRoomListInput {
    args: PaginationInput
    type: ChatRoomType
    userId: Int!
}

input CloseChatRoomInput {
    roomId: Int!
    userId: Int!
}

input CreateChatRoomInput {
    members: [ChatMemberInput!]!
    name: String
    type: ChatRoomType!
}

input CreateUserInput {
    avatarUrl: Upload
    email: String!
    firstName: String!
    lastName: String!
    location: String
    password: String!
    role: Int!
    story: String
}

input DeleteChatMessageInput {
    messageId: ID!
    userId: Int!
}

input EditChatMessageInput {
    content: String!
    messageId: ID!
    userId: Int!
}

input ForgotPassword {
    gmail: String!
}

input LeaveChatRoomInput {
    roomId: Int!
    userId: Int!
}

input PaginationInput {
    after: Cursor
    before: Cursor
    first: Int
    last: Int
}

input PostChatMessageInput {
    content: String!
    messageContentType: MessageContentType
    roomId: Int!
    userId: Int!
}

input SendDirectMessageInput {
    content: String!
    fromUserId: Int!
    toUserId: Int!
}

input UpdateUserInput {
    avatar: Upload
    firstName: String
    id: Int!
    lastName: String
    location: String
    story: String
}

input UserLoginInput {
    account: String!
    password: String!
}

input ViewChatMessagesInput {
    args: PaginationInput
    roomId: Int!
    userId: Int!
}

input changePasswordInput {
    id: ID!
    new_passWord: String!
    old_passWord: String!
}
